>>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul



>>> lazy_matrix_mul([[1, 2]], [[3], [4]])
array([[11]])

>>> lazy_matrix_mul([[1, 2, 3], [4, 5, 6]], [[7, 8], [9, 10], [11, 12]])
array([[ 58,  64],
       [139, 154]])

>>> lazy_matrix_mul([[1]], [[2]])
array([[2]])

# Test with incompatible matrices
>>> lazy_matrix_mul([[1, 2]], [[3, 4], [5, 6], [7, 8]])
Traceback (most recent call last):
    ...
ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 3 is different from 2)


# Test with invalid input (not a list of lists)
>>> lazy_matrix_mul([[1, 2], 'not a matrix'], [[1, 2], [3, 4]])
Traceback (most recent call last):
    ...
TypeError: can only concatenate list (not "str") to list

# Test with empty matrices
>>> lazy_matrix_mul([], [])
0.0



# Test with matrices containing zeroes
>>> lazy_matrix_mul([[0, 0], [0, 0]], [[1, 2], [3, 4]])
array([[0, 0],
       [0, 0]])

# Test with non-square matrices
>>> lazy_matrix_mul([[1, 2, 3]], [[4], [5], [6]])
array([[32]])

# Test matrix and vector multiplication
>>> lazy_matrix_mul([[1, 2], [3, 4]], [5, 6])
array([17, 39])


# Test matrix with one row
>>> lazy_matrix_mul([[1, 2, 3]], [[4, 5], [6, 7], [8, 9]])
array([[40, 46]])

# Test matrix with one column
>>> lazy_matrix_mul([[1, 2], [3, 4], [5, 6]], [[7], [8]])
array([[23],
       [53],
       [83]])

# Test multiplication order
>>> lazy_matrix_mul([[1, 2], [3, 4]], [[5, 6], [7, 8]])
array([[19, 22],
       [43, 50]])
>>> lazy_matrix_mul([[5, 6], [7, 8]], [[1, 2], [3, 4]])
array([[23, 34],
       [31, 46]])

# Test with 1D arrays
>>> lazy_matrix_mul([1, 2, 3], [4, 5, 6])
32

